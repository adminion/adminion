{"ts":1366245431108,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n  * This file keeps the game code\n  *\n  */\n\nvar cards = []\nvar treasureTemplate = [\n\t{\n\t\ttype:'treasure',\n\t\tname:'copper',\n\t\tcost:0,\n\t\tvalue:1,\n\t\tquantity:100\n\t},\n\t{\t\n\t\ttype:'treasure',\n\t\tname:'silver',\n\t\tcost:3,\n\t\tvalue:2,\n\t\tquantity:50\n\t},\n\t{\n\t\ttype:'treasure',\n\t\tname:'gold',\n\t\tcost:6,\n\t\tvalue:3,\n\t\tquantity:25\n\t},\n\t{\n\t\ttype:'treasure',\n\t\tname:'platinum',\n\t\tcost:9,\n\t\tvalue:5,\n\t\tquantity:15\n\t},\n\t{\n\t\ttype:'treasure',\n\t\tname:'potion',\n\t\tcost:4,\n\t\tvalue:0,\n\t\tquantity:20\t\n\t},\n]\nvar victoryTemplate = [\n\t{\n\t\ttype:'victory',\n\t\tname:'estate',\n\t\tcost:2,\n\t\tvalue:1,\n\t\tquantity:50\t\n\t}, \n\t{\n\t\ttype:'victory',\n\t\tname:'duchy',\n\t\tcost:5,\n\t\tvalue:3,\n\t\tquantity:30\t\n\t}, \t\t\n\t{\n\t\ttype:'victory',\n\t\tname:'province',\n\t\tcost:8,\n\t\tvalue:5,\n\t\tquantity:20\t\n\t}, \n\t{\n\t\ttype:'victory',\n\t\tname:'colony',\n\t\tcost:11,\n\t\tvalue:10,\n\t\tquantity:15\t\n\t}, \n\t{\n\t\ttype:'victory',\n\t\tname:'curse',\n\t\tcost:0,\n\t\tvalue:-1,\n\t\tquantity:25\t\n\t}\n]\n\nvar actionTemplates = [\n\t{\n\t\ttype:\"action\",\n\t\tname:\"Council Room\",\n\t\tcost:5,\n\t\tinstructions:\"+4 cards, +1 buy\",\n\t\tduration:0,\n\t\teffects:{\n\t\t\tactions: 0,\n\t\t\tbuys: 1,\n\t\t\tmoney: 0,\n\t\t\tcards: 4\n\t\t}\t\t\n\t},\n\t{\n\t\ttype:\"action\",\n\t\tname:\"Throne Room\",\n\t\tcost:4,\n\t\tinstructions:\"2x\",\n\t\tduration:0,\n\t\teffects:{\n\t\t\tactions: 0,\n\t\t\tbuys: 0,\n\t\t\tmoney: 0,\n\t\t\tcards: 0\n\t\t}\t\n\t},\n\t{\n\t\ttype:\"action\",\n\t\tname:\"Laboratory\",\n\t\tcost:5,\n\t\tinstructions:\"+2 cards, +1 action\",\n\t\tduration:0,\n\t\teffects:{\n\t\t\tactions: 1,\n\t\t\tbuys: 0,\n\t\t\tmoney: 0,\n\t\t\tcards: 2\n\t\t}\t\n\t},\n\t{\n\t\ttype:\"action\",\n\t\tname:\"Festival\",\n\t\tcost:5,\n\t\tinstructions:\"+2 actions, +2 money, +1 buy\",\n\t\tduration:0,\n\t\teffects:{\n\t\t\tactions: 2,\n\t\t\tbuys: 1,\n\t\t\tmoney: 2,\n\t\t\tcards: 0\n\t\t}\t\n\t}\n];\n\nfunction generatePlayer() {\n\treturn {\n\t\tid : 0,\n\t\tname,\n\t\tdeck: [],\n\t\tactions:1,\n\t\tbuys:1,\n\t\tmoney:0,\n\t\tcards:5,\n\t\tvictory:0,\n\t\thand: [],\n\t\tdiscard:[]\n\t};\n}\n\nfunction deal() {\n\tfor (var player in players) {\n\t\tplayer = generatePlayer();\n\t\tplayer.deck.push((victoryTemplate[0]*3),(treasureTemplate[0]*7));\n\t\t\n\t}\n}\n\nfunction turn(player) {\n\tdo {\n\t\tplayCard(player);\t\t\n\t}\n\twhile (player.actions > 0);\n\tdo {\n\t\tbuyCard(player);\n\t}\n\twhile (player.buys > 0);\n}\n\nfunction playCard(player) {\n//player chooses a card to play, if any\n\tif (chosenCard) {\n//if choseenCard has an action that it does, call that action\n\t\tchosenCard.action();\n//add the actions, buys, money, and +cards to the player's attributes\n\t\tplayer.actions += chosenCard.effects.actions;\n\t\tplayer.buys += chosenCard.effects.buys;\n\t\tplayer.money += chosenCard.effects.money;\n//if the card gives +cards, the player will call the function drawCard, add 1 to the #of cards in players hand, and take 1 off of the card's effects, for cases of +cards > 1\n\t\twhile (chosenCard.effects.cards > 0) {\n\t\t\tdrawCard(player);\n\t\t\tplayer.cards ++;\n\t\t\tchosenCard.effects.cards --;\n\t\t}\n//since chosenCard is played, -1 cards from #of cards in player's hand, \n\t\tplayer.cards --;\n//discard chosenCard\n\t\tplayer.discard.push(chosenCard);\n//remove chosenCard from hand\n\t\tplayer.hand.splice(player.hand.indexOf(chosenCard), 1);\n//-1 actions, cuz it done got used up\n\t\tplayer.actions --;\n\t}\n}\n//a function to draw a card - add a new card from the top of the deck to the player's hand, +1 to #ofcardsinhand, remove the new card from the top of the deck\nfunction drawCard(player){\n\tvar newCard = player.deck[0];\n\tplayer.hand.push(newCard);\n\tplayer.cards ++;\n\tplayer.deck.splice(player.deck[0], 1);\n//if the splice leaves the deck with no cards in it, shuffle the deck!\n\tif (player.deck.length == 0) {\n\t\tshuffleDeck(player)\n\t}\n}\n//draw five cards\nfunction drawHand(player) {\n\tfor (n = 0; n<5; n++) {\n\t\tdrawCard(player)\t\n\t}\n}\n//move the discarded cards back into the deck, empty the discard pile. this function essentially swaps each card in the deck (from place 0 to end of deck) with a random other card in the deck. i found this method of shuffling online somewhere- if it isn't random enough, maybe it would work better running through the for loop multiple times?\nfunction shuffleDeck(player) {\n\tplayer.deck = player.discarded;\n\tplayer.discarded = [];\n\tfor (var n = 0; n < player.deck.length - 1; n++) {\n\t\tvar k = n + Math.floor(Math.random() * (player.deck.length - n));\n\t\tvar temp = player.deck[k];\n\t\tplayer.deck[k] = player.deck[n];\n\t\tplayer.deck[n] = temp;\n\t}\n}\n//as player enters buy phase, add up the treasure cards and add them to the player's money attribute\nfunction buyCard(player) {\n\tfor (var card in player.hand) {\n\t\tif (card.type == 'treasure') {\n\t\t\tplayer.money += card.value;\n\t\t}\n\t}\n\tconsole.log(player+\" has \"+player.money+\" moneys!\")\n//player chooses card to buy (var = chosenCard). i'm not sure how we want to do that interaction\n//if the player can afford the card, add it to their discard pile, use their buy, take the money for the card out of the player's money, and take off 1 from the chosenCard pile\n\tif (player.money >= chosenCard.cost) {\n\t\tplayer.discard.push(chosenCard);\n\t\tplayer.buys --;\n\t\tplayer.money -= chosenCard.cost; \n\t\tchosenCard.quantity --;\n\t\tif (chosenCard.quantity <= 0){\n\t\t\texhausted.push(chosenCard);\n\t\t\tconsole.log(chosenCard+\" has been exHAUSted..\");\n\t\t}\n\t\tconsole.log(player+\" gains \"+chosenCard);\n\t}\n}\n\nvar gameConfig = {\n\tnumPlayers,\n\tpiles: [],\n\tnumPiles:10,\n\texhausted : [],\n\texhaustLimit : 3,\n\t}\n\n\nfunction\tpickPiles() {\n\tfor (var i = 0; i<=gameConfig.numPiles; i++) {\n\t\tvar Random = Math.floor(Math.random() * actionTemplates.length);\n\t\tgameConfig.piles.push(actionTemplates[Random]);\n\t}\n}\n\nvar exhausted = 0;\nvar players = [];\n//the start of the game\nfor (var num in players) {\n\tdrawHand(players[num]);\n}\n//each player takes a turn, as long as end condition isn't met\nwhile (gameConfig.exhausted.length < gameConfig.exhaustLimit) {\n\tfor (var num in players) {\n\t\tturn(num);\n}\n//the end of the game- if end condition is met or exceeded, add up all teh victory points for each player\nif (gameConfig.exhausted.length >= gameConfig.exhaustLimit || victoryTemplate[2].quantity <= 0) {\n//the original rules say that once provinces are depleted, the game ends too, thus the victoryTemplate[2]\n\tfor (var player in players) {\n\t\tfor (var cards in player.deck)\n\t\t\tif (cards.type == 'Victory') {\n\t\t\t\tplayer.victory += cards.value;\n\t\t\t}\n\t\tconsole.log(player+\" has \"+player.victory+\" victory points!\";\n\t}\n\t\n}\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":6209}]],"length":6209}
